--- Tcpbw100.java.orig	2010-04-13 03:02:45.000000000 +0400
+++ Tcpbw100.java	2010-05-29 20:54:58.975941500 +0400
@@ -59,6 +59,10 @@
 The Software was developed at least in part by the University of Chicago,
 as Operator of Argonne National Laboratory (http://miranda.ctd.anl.gov:7123/). 
  */
+import skin.Interface;
+import skin.TextPane;
+import skin.control.SkinPanel;
+
 import java.io.*;
 import java.net.*;
 import java.net.Socket;
@@ -71,25 +75,10 @@
 import java.util.*;
 import java.text.*;
 import java.lang.*;
-import javax.swing.JLabel;
-import javax.swing.JApplet;
-import javax.swing.JFrame;
-import javax.swing.JTextArea;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.BorderFactory;
-import javax.swing.JTextPane;
+import javax.swing.*;
 import javax.swing.text.StyledDocument;
 import javax.swing.text.DefaultStyledDocument;
 import javax.swing.text.BadLocationException;
-import javax.swing.JOptionPane;
-import javax.swing.BoxLayout;
-import javax.swing.JSpinner;
-import javax.swing.SpinnerNumberModel;
-import javax.swing.JComboBox;
-import javax.swing.JProgressBar;
 
 // Workaround for remote JavaScript start method
 import java.security.AccessController;
@@ -129,11 +118,18 @@
   MyTextPane results;
   String inresult, outresult, errmsg;
   JButton startTest;
+
+  // BEGIN by prv
+  JButton stopTest;
+  // END by prv
+
   JButton disMiss, disMiss2;
   JButton copy, copy2;
   JButton deTails;
   JButton sTatistics;
+  /* BEGIN by prv
   JButton mailTo;
+  END by prv */
   JButton options;
   JCheckBox defaultTest, preferIPv6;
   JSpinner numOfTests = new JSpinner();
@@ -165,6 +161,10 @@
   int ssndqueue;
   double sbytes;
 
+  // BEGIN by prv
+  private boolean _stop;
+  // END by prv
+
   /*************************************************************************
    * JavaScript access API extension
    * Added by Seth Peery and Gregory Wilson, Virginia Tech
@@ -465,10 +465,17 @@
   int c2sResult = SFW_NOTTESTED;
   int s2cResult = SFW_NOTTESTED;
 
+  // BEGIN by prv
+  private SkinPanel skinPanel;
+  // END by prv
+
   public void showStatus(String msg)
   {
     if (!isApplication) {
       super.showStatus(msg);
+        // BEGIN by prv
+        skinPanel.getStatusLabel().setText(msg);
+        // END by prv
     }
   }
 
@@ -481,6 +488,12 @@
   }
   
 
+  // BEGIN by prv
+  public boolean wantToStop() {
+    return _stop;
+  }
+  // END by prv
+
   public void init() {
       if (getParameter("country") != null) country = getParameter("country");
       if (getParameter("language") != null) lang = getParameter("language");
@@ -493,32 +506,86 @@
           e.printStackTrace();
       }
 
+      /* BEGIN by prv
       getContentPane().setLayout(new BorderLayout());
       showStatus(messages.getString("ready"));
+      END by prv */
       failed = false ;
       Randomize = false;
       cancopy = false;
+      /* BEGIN by prv
       results = new MyTextPane();
+      END by prv */
+      // BEGIN by prv
+      Interface skin = Interface.getInstance();
+
+      skinPanel = new SkinPanel(skin);
+      Insets insets = skinPanel.getInsets();
+      results = new MyTextPane(skin.getTextPane(), insets);
+      // END by prv
+
+      // BEGIN by prv
+      startTest = skinPanel.getStartButton();
+      startTest.addActionListener(this);
+      stopTest = skinPanel.getStopButton();
+      stopTest.setEnabled(false);
+
+      stopTest.addActionListener(new ActionListener() {
+
+          public void actionPerformed(ActionEvent e) {
+              if (!_stop && JOptionPane.showConfirmDialog(null, "Are you sure?", "Stop test", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
+                  stopTest.setEnabled(false);
+                  _stop = true;
+              }
+
+          }
+
+      });
+
+
+      options = skinPanel.getAdvancedButton();
+      options.addActionListener(new ActionListener() {
+
+         public void actionPerformed(ActionEvent e) {
+            options.setEnabled(false);
+            showAdvancedPanel();
+
+         }
+
+      });
+
+      setContentPane(skinPanel);
+      // END by prv
+
       results.append("TCP/Web100 Network Diagnostic Tool v" + VERSION + "\n");
+      /* BEGIN by prv
       results.setEditable(false);
       getContentPane().add(new JScrollPane(results));
+      END by prv */
       results.append(messages.getString("clickStart") + "\n");
+      /* BEGIN by prv
       Panel mPanel = new Panel();
       startTest = new JButton(messages.getString("start"));
       startTest.addActionListener(this);
       mPanel.add(startTest);
+      END by prv */
       sTatistics = new JButton(messages.getString("statistics"));
+      /* BEGIN by prv
       sTatistics.addActionListener(this);
       if (getParameter("disableStatistics") == null) {
           mPanel.add(sTatistics);
       }
       sTatistics.setEnabled(false);
+      END by prv */
       deTails = new JButton(messages.getString("moreDetails"));
+      /* BEGIN by prv
       deTails.addActionListener(this);
       if (getParameter("disableDetails") == null) {
           mPanel.add(deTails);
       }
+      END by prv */
       deTails.setEnabled(false);
+      /* BEGIN by prv
       mailTo = new JButton(messages.getString("reportProblem"));
       mailTo.addActionListener(this);
       if (getParameter("disableMailto") == null) {
@@ -539,6 +606,7 @@
           mPanel.add(options);
       }
       getContentPane().add(BorderLayout.SOUTH, mPanel);
+      END by prv */
       preferIPv6 = new JCheckBox(messages.getString("preferIPv6"));
       preferIPv6.setSelected(true);
       defaultTest = new JCheckBox(messages.getString("defaultTests"));
@@ -568,6 +636,16 @@
 
 class MyTextPane extends JTextPane
   {
+    public MyTextPane(final TextPane skin, final Insets insets) {
+
+        setEditable(false);
+
+        final Dimension size = new Dimension(skin.getW(), skin.getH());
+        setPreferredSize(size);
+        setBounds(skin.getX() + insets.left, skin.getY() + insets.top,
+                size.width, size.height);
+    }
+
     public void append(String text)
     {
       try {
@@ -586,6 +664,44 @@
     }
   }
 
+    private void showAdvancedPanel() {
+        final JDialog dialog = new JDialog();
+        dialog.setTitle("Advanced");
+        JPanel panel = new JPanel(new BorderLayout());
+        panel.add(BorderLayout.CENTER, new JScrollPane(results));
+        JPanel buttonsPanel = new JPanel();
+
+        final JButton optionsButton = new JButton("Options");
+        optionsButton.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                showOptions();
+            }
+        });
+        buttonsPanel.add(optionsButton);
+
+        buttonsPanel.add(deTails);
+
+        JButton btn = new JButton("Close");
+        btn.addActionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                dialog.dispose();
+            }
+        });
+        buttonsPanel.add(btn);
+        panel.add(BorderLayout.SOUTH, buttonsPanel);
+        dialog.addWindowListener(new WindowAdapter() {
+            @Override
+            public void windowClosed(WindowEvent e) {
+                options.setEnabled(true);
+            }
+        });
+        dialog.setContentPane(panel);
+        dialog.setSize(new Dimension(600, 400));
+        dialog.setLocationRelativeTo(null);
+        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
+        dialog.setVisible(true);
+    }
+
   class StatusPanel extends JPanel
   {
       private int _testNo;
@@ -663,10 +779,17 @@
         diagnose();
         statistics();
         startTest.setEnabled(false);
+                // BEGIN by prv
+                stopTest.setEnabled(true);
+                _stop = false;
+                // END by prv
+
         deTails.setEnabled(false);
         sTatistics.setEnabled(false);
+          /* BEGIN by prv
         mailTo.setEnabled(false);
         options.setEnabled(false);
+                END by prv */
         numOfTests.setEnabled(false);
         StatusPanel sPanel = new StatusPanel(testsNum);
 		getContentPane().add(BorderLayout.NORTH, sPanel);
@@ -675,7 +798,10 @@
 
         try {
             while (true) {
+                /* BEGIN by prv
                 if (sPanel.wantToStop()) {
+                END by prv */
+                if (sPanel.wantToStop() || wantToStop()) {
                     break;
                 }
                 if (testsNum == 0) {
@@ -688,7 +814,10 @@
                 if (testNo == testsNum) {
                     break;
                 }
+                /* BEGIN by prv
                 if (sPanel.wantToStop()) {
+                END by prv */
+                if (sPanel.wantToStop() || wantToStop()) {
                     break;
                 }
                 sPanel.setText("");
@@ -696,8 +825,10 @@
                 testNo += 1;
                 deTails.setEnabled(true);
                 sTatistics.setEnabled(true);
+                /* BEGIN by prv
                 mailTo.setEnabled(true);
                 options.setEnabled(true);
+                END by prv */
                 statistics.append("\n** " + messages.getString("test") + " " + testNo + " **\n");
                 diagnosis.append("\n** " + messages.getString("test") + " " + testNo + " **\n");
                 try {
@@ -744,19 +875,38 @@
 
         if (failed) {
           results.append(errmsg);
+          // BEGIN by prv
+          showStatus(Interface.getInstance().getStopString());
+          // END by prv
 
 		  pub_isReady = "failed";
 		  pub_errmsg = errmsg;
         }
+        // BEGIN by prv
+        else {
+          showStatus(Interface.getInstance().getCompleteTestString());
+        }
+        // END by prv
 
         deTails.setEnabled(true);
         sTatistics.setEnabled(true);
+        /* BEGIN by prv
         mailTo.setEnabled(true);
         options.setEnabled(true);
+        END by prv */
+        // BEGIN by prv
+        skinPanel.setValue1_(0);
+        skinPanel.setValue2_(0);
+        // END by prv
         numOfTests.setEnabled(true);
+        /* BEGIN by prv
         showStatus(messages.getString("done2"));
+        END by prv */
         results.append("\n" + messages.getString("clickStart2") + "\n");
         startTest.setEnabled(true);
+        // BEGIN by prv
+        stopTest.setEnabled(false);
+        // END by prv
         testInProgress = false;
 		getContentPane().remove(sPanel);
         getContentPane().validate();
@@ -851,7 +1001,9 @@
       /* now look for middleboxes (firewalls, NATs, and other boxes that
        * muck with TCP's end-to-end priciples
        */
+      /* BEGIN by prv
       showStatus(messages.getString("middleboxTest"));
+      END by prv */
       results.append(messages.getString("checkingMiddleboxes") + "  ");
       statistics.append(messages.getString("checkingMiddleboxes") + "  ");
       emailText = messages.getString("checkingMiddleboxes") + "  ";
@@ -967,7 +1119,10 @@
   {
     Message msg = new Message();
     if ((tests & TEST_SFW) == TEST_SFW) {
+      /* BEGIN by prv
       showStatus(messages.getString("sfwTest"));
+      END by prv */
+      showStatus(Interface.getInstance().getFirewallTestString());
       results.append(messages.getString("checkingFirewalls") + "  ");
       statistics.append(messages.getString("checkingFirewalls") + "  ");
       emailText = messages.getString("checkingFirewalls") + "  ";
@@ -1083,7 +1238,10 @@
 		byte buff2[] = new byte[64*1024];
     Message msg = new Message();
     if ((tests & TEST_C2S) == TEST_C2S) {
+      /* BEGIN by prv
       showStatus(messages.getString("outboundTest"));
+      END by prv */
+      showStatus(Interface.getInstance().getUploadTestString());
       results.append(messages.getString("runningOutboundTest") + " ");
       statistics.append(messages.getString("runningOutboundTest") + " ");
       emailText += messages.getString("runningOutboundTest") + " ";
@@ -1158,6 +1316,11 @@
           break;
         }
         pkts++;
+        // BEGIN by prv
+        if (System.currentTimeMillis() - t > 0) {
+          skinPanel.setValue2((int) ((8.0 * pkts * lth) / (System.currentTimeMillis() - t)));
+        }
+        //END by prv
       } while (System.currentTimeMillis() < stop_time);
 
       t =  System.currentTimeMillis() - t;
@@ -1194,6 +1357,10 @@
         emailText += prtdbl(sc2sspd) + "Mb/s\n%0A";
       }
 
+      // BEGIN by prv
+      skinPanel.setValue2((int) (sc2sspd * 1000));
+      // END by prv
+      
 		// Expose upload speed to JavaScript clients
            pub_c2sspd = sc2sspd;
     
@@ -1217,7 +1384,10 @@
 		byte buff[] = new byte[8192];
     Message msg = new Message();
     if ((tests & TEST_S2C) == TEST_S2C) {
+        /* BEGIN by prv
         showStatus(messages.getString("inboundTest"));
+        END by prv */
+        showStatus(Interface.getInstance().getDownloadTestString());
         results.append(messages.getString("runningInboundTest") + " ");
         statistics.append(messages.getString("runningInboundTest") + " ");
         emailText += messages.getString("runningInboundTest") + " ";
@@ -1275,6 +1445,10 @@
           bytes += inlth;
           if ((System.currentTimeMillis() - t) > 14500)
             break;
+          // BEGIN by prv
+          if (System.currentTimeMillis() - t > 0)
+          skinPanel.setValue1((int) ((8.0 * bytes) / (System.currentTimeMillis() - t)));
+          // END by prv
         }
       } 
       catch (IOException e) {}
@@ -1283,6 +1457,10 @@
       System.out.println(bytes + " bytes " + (8.0 * bytes)/t + " kb/s " + t/1000 + " secs");
       s2cspd = ((8.0 * bytes) / 1000) / t;
 
+      // BEGIN by prv
+      skinPanel.setValue1((int) ((8.0 * bytes) / t));
+      // END by prv
+      
       /* receive the s2cspd from the server */
       if (ctl.recv_msg(msg) != 0) {
         errmsg = messages.getString("protocolError") + Integer.parseInt(new String(msg.body), 16) + " instead\n";
@@ -1487,6 +1665,9 @@
           // tests in the queue.
           wait = (wait * 45);
           results.append(messages.getString("otherClient") + wait + messages.getString("seconds") +".\n");
+          // BEGIN prv
+          showStatus(Interface.getInstance().getWaitString());
+          // END prv
 	  swait = 1;
       }
 
@@ -1525,7 +1706,10 @@
       StringTokenizer tokenizer = new StringTokenizer(new String(msg.body), " ");
 
       while (tokenizer.hasMoreTokens()) {
+          /* BEGIN by prv
           if (sPanel.wantToStop()) {
+          END by prv */
+          if (sPanel.wantToStop() || wantToStop()) {
               ctl.send_msg(MSG_ERROR, "Manually stopped by the user".getBytes());
               ctl.close();
               ctlSocket.close();
@@ -1558,14 +1742,37 @@
                       results.append(messages.getString("c2sThroughputFailed") + "\n");
                       tests &= (~TEST_C2S);
                   }
+                  // BEGIN by prv
+                  try {
+                      Thread.sleep(3000);
+                  } catch (InterruptedException e) {
+                  }
+                  skinPanel.setValue2_(0);
+                  try {
+                      Thread.sleep(1000);
+                  } catch (InterruptedException e) {
+                  }
+                  // END by prv
                   break;
               case TEST_S2C:
+                  // BEGIN by prv
+                  try {
+                      Thread.sleep(1000);
+                  } catch (InterruptedException e) {
+                  }
+                  // END by prv
                   sPanel.setText(messages.getString("s2cThroughput"));
                   if (test_s2c(ctl, ctlSocket)) {
                       results.append(errmsg);
                       results.append(messages.getString("s2cThroughputFailed") + "\n");
                       tests &= (~TEST_S2C);
                   }
+                  // BEGIN by prv
+                  try {
+                      Thread.sleep(1000);
+                  } catch (InterruptedException e) {
+                  }
+                  // END by prv
                   break;
               default:
                   errmsg = messages.getString("unknownID") + "\n";
@@ -1573,7 +1780,10 @@
                   return;
           }
       }
+      /* BEGIN by prv
       if (sPanel.wantToStop()) {
+      END by prv */
+      if (sPanel.wantToStop() || wantToStop()) {
           ctl.send_msg(MSG_ERROR, "Manually stopped by the user".getBytes());
           ctl.close();
           ctlSocket.close();
@@ -1637,6 +1847,21 @@
           middleboxResults(tmpstr2);
       }
 	  
+      // BEGIN by prv
+      skinPanel.setRtt(avgrtt);
+      skinPanel.setLoss(loss);
+
+      StringBuilder sb = new StringBuilder();
+      sb.append("sessionid=").append(URLEncoder.encode(getParameter("sessionid"), "UTF-8")).append('&');
+      sb.append("avgrtt=").append(URLEncoder.encode(String.valueOf(avgrtt), "UTF-8")).append('&');
+      sb.append("loss=").append(URLEncoder.encode(String.valueOf(loss), "UTF-8")).append('&');
+      sb.append("upload=").append(URLEncoder.encode(String.valueOf(sc2sspd), "UTF-8")).append('&');
+      //        sb.append("upload=").append(URLEncoder.encode(String.valueOf(c2sspd), "UTF-8")).append('&');
+      sb.append("download=").append(URLEncoder.encode(String.valueOf(s2cspd), "UTF-8")).append('\n');
+      System.out.println("Request: " + sb.toString());
+      sendPostRequest(getParameter("resultServer"), sb.toString());
+      // END by prv
+
 	  pub_isReady="yes";
 	  pub_errmsg ="All tests completed OK.";
   }
@@ -2518,7 +2743,9 @@
 
 
 	public void diagnose() {
+        /* BEGIN by prv
 		showStatus(messages.getString("getWeb100Var"));
+		END by prv */
 		
 		if (f == null) {
 			f = new clsFrame();
@@ -2547,7 +2774,9 @@
 	
 
 	public void statistics() {
+        /* BEGIN by prv
 		showStatus(messages.getString("printDetailedStats"));
+		END by prv */
 
 		if (ff == null) {
 			ff = new clsFrame();
@@ -2649,6 +2878,14 @@
 				ff.dispose();
 				ff = null;
 			}
+            // BEGIN by prv
+            _stop = false;
+            skinPanel.setValue1(0);
+            skinPanel.setValue2(0);
+            skinPanel.setRtt(0f);
+            skinPanel.setLoss(0f);
+            showStatus(Interface.getInstance().getPreparingTestString());
+            // END by prv
 
 			pub_errmsg = "Test in progress.";
 			runtest();
@@ -2699,6 +2936,7 @@
 			sTatistics.setEnabled(true);
 		}
 
+        /* BEGIN by prv
 		else if (source == mailTo) {
 			int i;
 			char key;
@@ -2735,6 +2973,7 @@
 
 			getAppletContext().showDocument(targetURL);
 		}
+		END by prv */
 	}  // actionPerformed()
 
 
@@ -2773,4 +3012,29 @@
     frame.setVisible(true);
   }
 
+  // BEGIN by prv
+  // send a POST request to Web server
+
+  public void sendPostRequest(String url, String message) {
+    try {
+      System.out.println("Send report to: " + url);
+      URLConnection connection = new URL(url).openConnection();
+      connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
+      connection.setDoOutput(true);
+      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(connection.getOutputStream()));
+      out.write(message);
+      out.flush();
+      out.close();
+
+      BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
+      while (in.read() != -1) ;
+      System.out.println();
+      in.close();
+
+    } catch (Exception e) {
+      e.printStackTrace();
+    }
+  }
+  // END by prv
+  
 } // class: Tcpbw100
